package prg;

import java.util.concurrent.Semaphore;
class ReaderWritersProblem {
    
    static Semaphore readLock=new Semaphore(1);
    static Semaphore WriteLock=new Semaphore(1);
    static int readCount=0;
    
    static class Read implements Runnable{
        public void run(){
            try{
                readLock.acquire();
                readCount++;
                if(readCount==1){
                    WriteLock.acquire();
                }
                readLock.release();

                System.out.println("Thread"+Thread.currentThread().getName()+"is Reading");
                Thread.sleep(1500);
                System.out.println("Thread"+Thread.currentThread().getName()+"has finished reading");
                readLock.acquire();
                readCount--;

                if(readCount==0){
                    WriteLock.release();
                }
                readLock.release();
            }catch (InterruptedException e){
                System.out.println(e.getMessage());
            }
        }
    }
    static class write implements Runnable{
        public void run(){
            try{
                WriteLock.acquire();
                System.out.println("Thread"+Thread.currentThread().getName()+"is writing");
                Thread.sleep(2500);
                System.out.println("Thread"+Thread.currentThread().getName()+"has finished writing");
                WriteLock.release();
            }
            catch(InterruptedException e){
                System.out.println(e.getMessage());
            }
        }
    }
    public static void main(String[] args)throws Exception{
        Read read=new Read();
        write write=new write();
        Thread t1=new Thread(read);
        t1.setName("thread1");

        Thread t2=new Thread(read);
        t2.setName("thread2");
        
        
        Thread t3=new Thread(write);
        t3.setName("thread3");
        Thread t4=new Thread(read);
        t4.setName("thread4");

        t1.start();
        t2.start();
        t3.start();
        t4.start();


    }

}
